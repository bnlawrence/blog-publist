from pyzotero import zotero
import re

def get_cursor(filename='bnl-api-key'):
    """ Return the interface for later queries"""
    with open(filename,'r') as f:
        key, id = f.read().split('\n')
    return zotero.Zotero(id,'user',key)

def get_items_for_tag(mothership, tag, limit=None):
    """ get citations from mothership in date order for particular tag """
    keywords = {
        'format':'json',
        'content':'bib',
        'style':'apa',
        'sort':'date'
    }
    keywords['tag']=tag
    if limit is None:
        # We need to paginate
        items = []
        limit = 100
        start = 0 
        n = 100
        while n==100:
            keywords['limit'] = limit
            keywords['start'] = start
            newitems = mothership.items(**keywords)
            n = len(newitems)
            start += 100
            items += newitems
            print("getting", start, n,)
        return items
    else:
        return mothership.items(**keywords)

def parse2fix(item, myname, refclass):
    """ Return year, and add link to any urls, if present.
    Also emphasize myname and make alter class depending on reffclass
    """
    # dates can be messy, but I think this will work for where and how apa does it
    year = re.search('\(\d\d\d\d',item)[0][1:]
    # stick a div around the title
    # from end of the ) following a date to the < of hte journal.
    title = re.search('\).*?<',item)[0][2:-1]
    if title != ' ':
        item = item.replace(title,f'<span class="reftitle">{title}</span>')
    else:
        item = item.replace('<i>','<span class="reftitle">')
        item = item.replace('</i>','</span>')
    # url is hard because american met soc URLS are nasty
    # gonna look for the last http and then go to the end and hope that's ok
    x = item.rfind('http')
    if x > 1:
        #find the div at the end
        y = item.find('</div>')
        url = item[x:y]
        if 'doi' in url:
            image = '<img style="height:1.1em" src="/assets/doi.svg"/>'
            new = f'<br/>{image}&nbsp;<a href="{url}" class="doiref">{url}</a>'
        else:
            image = '<img src="/assets/download.svg" style="height:1.1em"/>'
            new = f'<br/>{image}&nbsp;<a href="{url}" class="url4ref">{url}</a>'
        item=item.replace(url,new)
    for x in myname:
        if x in item:
            item = item.replace(x[:-1],f'<span class="author">{x[:-1]}</span>')
    if contribution != '':
        newclass='pubref'
        item = item[0:-6]+ f' <span class="refnum">(Paper #{contribution})</span>' + item[-6:]
    else:
        newclass = 'pubnoref'
    item = item.replace("csl-entry",newclass)
    return year, item



if __name__=="__main__":

    # list all the permutations of your name that you will want to highlight in the bibliography
    myname = ['Lawrence, B.,', 'Lawrence, B. N.,','Lawrence, Bryan',
              'Lawrence, B. N. (','Lawrence, B. (']
    
    # get the zotero interface
    c = get_cursor()

    # set limit to a small number for testing, but you want it to be None when you do it for real.
    limit = None
    
    # You are going to need two tags in your zotero bibliography,
    #  - one for all the items you want to appear in your CV, here I use "bnl-cv", and 
    #  - one for things you want to appear as enumerated refereed items. Here I use "bnl-cv-refgen".
    
    # We start by getting all the refereed items:
    ref_papers = get_items_for_tag(c, 'bnl-cv-refgen', limit=limit)
    
    #now start building the material for your bibliography markdown page.
    current_year = None
    page = '---\ntitle: Academic Contributions\nlayout: page\npermalink: /publications/\n---\n'
    page += '{% comment %} This file generated by get-bnl-zotero.py in pyzotero repository {% endcomment %}'
    page += '<div markdown="0" class="papers">\n'
    page += '<ul>'

    # now loop over all the items you want in your bibliography
    for item in get_items_for_tag(c, 'bnl-cv', limit=limit):
        # and see if it is in a refereed one or not
        try:
            index = ref_papers.index(item)
            contribution=f'{len(ref_papers)-index}'
        except ValueError:
            contribution=''
        #now build up a nice html representation of each item
        year, item = parse2fix(item, myname, contribution)

        # and organise it by years
        if year != current_year:
            page += f'<h4>{year}</h4>\n'
            current_year = year

        # add the item
        page+=f"<li>{item}</li>\n"

    # end of page text
    page +='</ul><p>(The <span class="refnum">enumeration</span> denotes refereed conference papers and journal articles.)</p></div>'
    
    # and write it out.
    with open('publications.md','w') as f:
        f.write(page)






